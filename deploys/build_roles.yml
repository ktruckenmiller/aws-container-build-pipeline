# needs access to
# stepfunction:GetActivityTask
# stepfunction:SendTaskSuccess
AWSTemplateFormatVersion: '2010-09-09'
Description: "A group of roles for dynamic resources in Codebuild Lambdas"
Parameters:
  CredstashKey:
    Type: String

Resources:
  CodebuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "codebuild.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              # Credstash
              - Effect: Allow
                Action:
                  - 'cloudformation:ListExports'
                Resource: '*'
              - Effect: "Allow"
                Action:
                  - 'kms:Decrypt'
                Resource: !Join ['', ['arn:aws:kms:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':key/', !Ref CredstashKey ]]
              - Effect: "Allow"
                Action:
                  - 'ecr:GetAuthorizationToken'
                  - 'ecr:DescribeRepositories'
                  - 'ecr:ListImages'
                  - 'ecr:UploadLayerPart'
                  - 'ecr:CompleteLayerUpload'
                  - 'ecr:PutImage'
                  - 'ecr:GetRepositoryPolicy'
                  - 'ecr:GetDownloadUrlForLayer'
                  - 'ecr:BatchCheckLayerAvailability'
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource: !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/credential-store' ]]
              - Effect: "Allow"
                Action:
                  - "states:GetActivityTask"
                  - "states:SendTaskSuccess"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"
  StateMachineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "states.us-west-2.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "lambda"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'lambda:InvokeFunction'
                Resource: "*"
  BuildSpawnRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"
      Path: "/"
      Policies:
        - PolicyName: "root"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - 'codebuild:StartBuild'
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - 'kms:Decrypt'
                Resource: !Join ['', ['arn:aws:kms:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':key/', !Ref CredstashKey ]]
              - Effect: "Allow"
                Action:
                  - "dynamodb:GetItem"
                  - "dynamodb:Query"
                  - "dynamodb:Scan"
                Resource: !Join ['', ['arn:aws:dynamodb:', !Ref 'AWS::Region', ':', !Ref 'AWS::AccountId', ':table/credential-store' ]]
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogGroup"
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                Resource: "*"

Outputs:
  CodebuildRole:
    Description: "Role for generic codebuild"
    Value: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref CodebuildRole]]
    Export:
      Name: CodebuildGenericRole

  StateMachineRole:
    Description: "state machine role for lambdas"
    Value: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref StateMachineRole]]
    Export:
      Name: StateMachineRole

  BuildSpawnRole:
    Description: "Role for build spawn"
    Value: !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId', ':role/', !Ref BuildSpawnRole]]
    Export:
      Name: BuildSpawnRole
